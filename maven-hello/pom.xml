<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>com.fangjie.maven</groupId>
        <artifactId>maven-group</artifactId>
        <version>1.0-SNAPSHOT</version>
        <!-- 相对路径,默认为“../pom.xml” -->
        <relativePath>../pom.xml</relativePath>
    </parent>

    <!-- groupId:项目
         artifactId:模块
         version:版本
     -->
    <groupId>com.fangjie.maven</groupId>
    <artifactId>maven</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 项目依赖 -->
    <!-- scope:
            compile （编译范围）：

                如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath 中可用，同时它们也会被打包。

            provided （已提供范围）：

                依赖只有在当JDK 或者一个容器已提供该依赖之后才使用。
                例如， 如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，
                但是你不会想要在打包好的WAR 中包含这个Servlet API；
                这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。
                已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。

            runtime （运行时范围）:

                依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC驱动实现。

            test （测试范围）：

                范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。

            system （系统范围）：

                范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。
                这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。
                如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。

     -->
    <dependencies>
        <!--
            依赖原则：
                1.依赖级别不同，间接依赖路径最短优先
                2.依赖级别相同，dependency声明顺序优先

            exclusions:可排除某个间接依赖
        -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <!-- 版本可从父模块继承，当前可不写 -->
            <!--<version>${hibernate.version}</version>-->
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.driver.version}</version>
        </dependency>

        <!-- 测试数据准备与验证 -->
        <dependency>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>2.5.3</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <!-- 插件管理 -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <!-- source源码插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>